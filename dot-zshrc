#!/bin/zsh

# ZSH configuration

# History    {{{1
# format of command execution timestamp in history output
HIST_STAMPS='yyyy-mm-dd'

# Modules    {{{1
# zpty used by vim plugin zchee/deoplete-zsh
# zcomplist provides menuselect keymap
zmodload zsh/files zsh/zutil zsh/complist zsh/zpty

# Plugins    {{{1
plugins=(
    adb
    bgnotify
    chucknorris
    colored-man-pages
    colorize
    cpanm
    dircycle
    fasd
    git
    github
    npm
    perl
    ruby
    rvm
    themes
    tmux
    tmuxinator
    vi-mode
    vim-interaction
    zsh-autosuggestions
    zsh-syntax-highlighting
)

# Completion    {{{1
autoload -U +X compinit && compinit -u
# turn off old-style completion    {{{2
zstyle ':completion:*' use-compctl false
# menu completion    {{{2
# - based on http://zsh.sourceforge.net/Guide/zshguide06.html #6.2.3:
zstyle ':completion:*' menu select=10
bindkey -M menuselect '^o' accept-and-infer-next-history
# use bash completion scripts    {{{2
# - /etc/bash_completion used to load the
#   completion scripts in
#   /etc/bash_completion.d/, but now all
#   it does is run
#   /usr/share/bash-completion/bash_completion,
#   so there is no longer any need to source
#   /etc/bash_completion
# - running /usr/share/bash-completion/bash_completion
#   in zsh seems to prevent the completion scripts in
#   /usr/share/bash-completion/completions/ from
#   sourcing, so don't run it
# - modern practice is to install completion
#   scripts to
#   /usr/share/bash-completion/completions/
#   but there are still completion scripts
#   in their legacy install location of
#   /etc/bash_completion.d/
bash_comp_d='/etc/bash_completion.d'
if [ -d "$bash_comp_d" ] ; then
    for file in "$bash_comp_d"/* ; do
        source $file 2>/dev/null
    done
fi
unset bash_comp_d
# - the following /usr/share/bash-completion/completions/
#   files break bash completion in zsh:
breakers=(
    /usr/share/bash-completion/completions/compgen  \
    /usr/share/bash-completion/completions/complete \
)
bash_comp='/usr/share/bash-completion/completions'
if [ -d "$bash_comp" ] ; then
    for file in "$bash_comp"/* ; do
# - ${(M)array[@]:#${pattern}} is zsh-fu that
#   expands to elements of array ${array} that
#   match pattern ${pattern}
# - so the following line tests for ${file}
#   values that do not occur in array ${breakers}
        if [[ -z "${(M)breakers[@]:#${file}}" ]] ; then
            source $file 2>/dev/null
        fi
    done
fi
unset bash_comp
# fasd command line completion    {{{2
eval "$(fasd --init auto)"
# default completion for commands without defined completion    {{{2
compdef _gnu_generic \
    convert display dpkg find gunzip iconv  \
    lintian man     mc   pass perl   python \
    rsync   sup-add sudo tar  vcsh
# enable fzf keybindings    {{{2
fzf_binary='fzf'
fzf_bindings='/usr/share/doc/fzf/examples/key-bindings.zsh'
if command -v "$fzf_binary" >/dev/null && [ -f "$fzf_bindings" ] ; then
    source "$fzf_bindings"
fi
unset fzf_binary fzf_bindings

# Vi keymap support    {{{1
# help    {{{2
bindkey -M vicmd 'H'   run-help
bindkey -M vicmd '^[h' run-help
bindkey -M viins '^[h' run-help
# history searching    {{{2
autoload -Uz narrow-to-region
function _history-incremental-preserve-pattern-search-backward {
    local state
    MARK=CURSOR  # magick, else multiple ^R don't work
    narrow-to-region -p "$LBUFFER${BUFFER:+>>}" \
        -P "${BUFFER:+<<}$RBUFFER" -S state
    zle end-of-history
    zle history-incremental-pattern-search-backward
    narrow-to-region -R state
}
zle -N _history-incremental-preserve-pattern-search-backward
bindkey -M vicmd   '/'  _history-incremental-preserve-pattern-search-backward
bindkey -M vicmd   '?'  history-incremental-pattern-search-forward
bindkey -M viins   '^R' _history-incremental-preserve-pattern-search-backward
bindkey -M isearch '^R' history-incremental-pattern-search-backward
bindkey -M viins   '^S' history-incremental-pattern-search-forward
# special keys    {{{2
# note: to get key sequence for a key, do either of these in terminal:
#       Ctrl-v [press key]
#       cat >/dev/null [press Enter then key]
#       [thanks to http://zshwiki.org/home/zle/bindkeys for tip]
# - home key
#   default: invokes run-help on first token in line
bindkey -M viins '^[[H' vi-beginning-of-line
# - end key
#   default: after pressing <home>, <end> stops working
bindkey -M viins '^[[F' end-of-line
# - delete key
#   default: change case of next three characters and enter normal mode
bindkey -M viins '^[[3~' vi-delete-char
# - <Ctrl-x><h> keys
#   default: display function help
bindkey -M viins '^Xh' _complete_help

# Mimetype support    {{{1
autoload -Uz zsh-mime-setup
zsh-mime-setup

# Renaming    {{{1
autoload -Uz zmv
alias zmv='noglob zmv'
alias zcp='noglob zmv -C'
alias zln='noglob zmv -Ls'

# Pager uses vim    {{{1
vimpager="$HOME/.cache/dein/repos/github.com/rkitover/vimpager/vimpager"
if [ -f "$vimpager" ] ; then
    export PAGER="$vimpager"
    alias less=$PAGER
    alias zless=$PAGER
fi
# Disable flow control (Ctrl-s, Ctrl-q)    {{{1
# tip from http://www.reddit.com/r/commandline/comments/1dhame/tmux_and_konsole_have_something_called_flow/
stty stop  undef
stty start undef

# Functions    {{{1
# load user functions    {{{2
my_fpath="$HOME/.zsh/functions-enabled"
fpath=($my_fpath $fpath)
function autoload_my_fns {
    local fn
    for fn in $(ls -x $my_fpath); do
        if [ -f "$my_fpath/$fn" ] ; then
            autoload "$fn"
        else
            echo "Error: could not find function '$my_fpath/$fn'"
        fi
    done
}
# configure user functions    {{{2
# - extract any archive ('ex <archive>')    {{{3
if type -f extract_archive &>/dev/null ; then
    alias ex=extract_archive
    compdef '_files -g "*.gz *.tgz *.bz2 *.tbz *.zip *.rar *.tar *.lha"' \
        extract_archive
fi
# - execute 'git status' if empty enter in git-managed dir    {{{3
autoload_my_fns magic-enter
if type -f magic-enter &>/dev/null ; then
    zle -N magic-enter
    bindkey -M viins   '^M'  magic-enter
fi
#  - git aliases    {{{3
autoload_my_fns git-add-all
if type -f git-add-all &>/dev/null ; then
    alias gaa=git-add-all
fi
# - man pages open in vim    {{{3
compdef vman='man'
# - file navigation    {{{3
#   . commands: to, bm, unbm and bms (where 'bm' is 'bookmark')
#   . http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH=$HOME/.marks
compctl -K _completebms to
compctl -K _completebms unbm
# ansi colours    {{{2
# - provides variables: RED, GREEN, YELLOW, BLUE, MAGENTA,
#   CYAN, BLACK, WHITE, the same colours as BOLD_*, and RESET
autoload colors && colors
for COLOR in RED GREEN YELLOW BLUE MAGENTA CYAN BLACK WHITE; do
    eval export $COLOR='$fg_no_bold[${(L)COLOR}]'
    eval export BOLD_$COLOR='$fg_bold[${(L)COLOR}]'
done
eval export RESET='$reset_color'

# Editor    {{{1
# prefer nvim    {{{2
# - temporarily disable due to nvim bug in which events are not triggering
#   associated autocmds (https://github.com/neovim/neovim/issues/11279) 
##if type nvim > /dev/null 2>&1; then
##    alias vim='nvim'
##fi

# Variables    {{{1
# paths    {{{2
# - base PATH    {{{3
unset path PATH
export -T PATH path
typeset -U PATH path
path+=('/usr/local/bin')
path+=('/usr/bin')
path+=('/bin')
path+=('/usr/games')
# - base LUA_PATH    {{{3
unset LUA_PATH lua_path
export -T LUA_PATH lua_path ';'  # separator is single semicolon
typeset -U LUA_PATH lua_path
lua_path+=('/usr/share/lua/lib/?.lua')       #} modules installed via user-
lua_path+=('/usr/share/lua/lib/?/init.lua')  #} built debian packages
lua_path+=(';')  # so LUA_PATH ends with ';;', meaning append default path
# - executables (local)    {{{3
local_bin="$HOME/.local/bin"
[[ -d "$local_bin" ]] && path=("$local_bin" $path)
unset local_bin
# - npm-installed apps    {{{3
#   . in ~/.npmrc is configured with prefix of ~/.local
if [[ -v node_path ]] ; then
    export -T NODE_PATH node_path
    typeset -U NODE_PATH node_path
fi
npm_mod="$HOME/.local/lib/node_modules"
[[ -d "$npm_mod" ]] && node_path+=("$npm_mod")
unset npm_mod
npm_man="$HOME/.local/share/man"
[[ -d "$npm_man" ]] && manpath+=("$npm_man")
unset npm_man
# - perl6 bin    {{{3
perl6_bin="$HOME/.perl6/bin"
[[ -d "$perl6_bin" ]] && path+=("$perl6_bin")
unset perl6_bin
# - perl5 locally installed modules    {{{3
#   . as per local::lib
#   . binary path
perl5_bin="$HOME/perl5/bin"
[[ -d "$perl5_bin" ]] && path+=("$perl5_bin")
unset perl5_bin
#   . library path
#     - 2016-03-13: discovered that PERL5LIB and PERL_LOCAL_LIB_ROOT
#       are set to their desired values before reaching this point,
#       so check value of vars before adding to them
perl5_lib="$HOME/perl5/lib/perl5"
[[ "$PERL5LIB" != "$perl5_lib" ]] && \
    export PERL5LIB="${perl5_lib}${PERL5LIB+:}${PERL5LIB}"
unset perl5_lib
perl5_root="$HOME/perl5"
[[ "$PERL_LOCAL_LIB_ROOT" != "$perl5_root" ]] && \
export PERL_LOCAL_LIB_ROOT=\
"${perl5_root}${PERL_LOCAL_LIB_ROOT+:}${PERL_LOCAL_LIB_ROOT}"
#   . build options
export PERL_MB_OPT="--install_base \"$perl5_root\""
export PERL_MM_OPT="INSTALL_BASE=$perl5_root"
unset perl5_root
#   . man pages
perl5_man="$HOME/perl5/man"
manpath+=("$perl5_man")
unset perl5_man
# - tiddlywiki    {{{3
if [[ ! -v tiddlywiki_plugin_path ]] ; then
    export -T TIDDLYWIKI_PLUGIN_PATH tiddlywiki_plugin_path
    typeset -U TIDDLYWIKI_PLUGIN_PATH tiddlywiki_plugin_path
fi
tw_plugins='/usr/local/share/tiddlywiki/plugins'  # user-installed
[[ -d "$tw_plugins" ]] && tiddlywiki_plugin_path+=("$tw_plugins")
tw_plugins='/usr/local/lib/node_modules/tiddlywiki/plugins'  # official
[[ -d "$tw_plugins" ]] && tiddlywiki_plugin_path+=("$tw_plugins")
unset tw_plugins
# editor    {{{2
if type nvim > /dev/null 2>&1; then
    export EDITOR='nvim'
else
    export EDITOR='vim'
fi
export USE_EDITOR="$EDITOR"
export VISUAL="$EDITOR"
# urls    {{{2
# - github account    {{{3
export GITURL='https://github.com/dnebauer'
# gpg encryption    {{{2
# - terminal support for vim    {{{3
GPG_TTY="$(tty)"
export GPG_TTY
# }}}1

# Oh My Zsh configuration

# Install location    {{{1
export ZSH="$HOME/.oh-my-zsh"

# Theme    {{{1
# see ~/.oh-my-zsh/themes/
#ZSH_THEME='robbyrussell'
#ZSH_THEME='juanghurtado'
#ZSH_THEME='josh'
ZSH_THEME='miloshadzic'

# Setup    {{{1
source $ZSH/oh-my-zsh.sh

# Options    {{{1
# type 'dir' instead of 'cd dir'    {{{2
# - set by plugin
setopt auto_cd
# automatically push old directory into directory stack    {{{2
# - set by plugin
setopt auto_pushd
# no multiples on directory stack    {{{2
# - set by plugin
setopt pushd_ignore_dups
# swap '+' and '-' meanings for stack directory    {{{2
# - set by plugin
setopt pushd_minus
# silence pushd messages    {{{2
setopt pushd_silent
# can try to expand cd var by prepending '~'    {{{2
# - set by plugin
setopt cdable_vars
# configure completion (override plugin-set options)    {{{2
# move to end of word on completion
setopt always_to_end
# complete from both ends of word
setopt complete_in_word
# history saves command timestamp and duration    {{{2
# - set by plugin
setopt extended_history
# expire duplicate commands first    {{{2
# - set by plugin
setopt hist_expire_dups_first
# do not add duplicate command to history    {{{2
# - set by plugin
setopt hist_ignore_dups
# remove history command if starts with space    {{{2
# - set by plugin
setopt hist_ignore_space
# if enter history line, reload in edit buffer    {{{2
# - set by plugin
setopt hist_verify
# add commands to history immediately    {{{2
# - set by plugin
setopt inc_append_history
# import new commands from history    {{{2
# - set by plugin
setopt share_history
# disable ctrl-s/ctrl-q flow control    {{{2
# - set by plugin
setopt no_flow_control
# list jobs in long format    {{{2
# - set by plugin
setopt long_list_jobs
# do expansions in prompt    {{{2
# - set by plugin
setopt prompt_subst
# expand globs    {{{2
setopt glob_complete
# sort numeric file names numerically    {{{2
setopt numeric_glob_sort
# parameter interpolation    {{{2
# - xx=(a b c); foo${xx}bar => fooabar foobbar foocbar
setopt rc_expand_param
# 10 second wait before global deletion    {{{2
setopt rm_star_wait
# correct spelling    {{{2
setopt correct
# allow comments in interactive shells    {{{2
setopt interactive_comments

# Preserve tmux's automatic title renaming    {{{1
# - prevent OMZ from overriding tmux's automatic rename setting
export DISABLE_AUTO_TITLE='true'
# }}}1

# Aliases (must come last to override aliases set up by modules)

# ls    {{{1
alias ls='ls -l --almost-all --color=auto'
# mp3info2 must use only tags, no deducing from file name    {{{1
alias mp3info2='mp3info2 -C autoinfo=ID3v2,ID3v1'
# reload zshrc    {{{1
alias reload=". ~/.zshrc && echo 'ZSH config reloaded from ~/.zshrc'"
# dictionary and thesaurus    {{{1
if which dict &>/dev/null ; then
    alias thes='dict -h localhost -d moby-thesaurus'
fi
# ag alias    {{{1
# - set automatically by oh-my-zsh
# - remove alias if ag binary exists
if [ -f '/usr/bin/ag' ] ; then
    if [ $(alias 'ag' >/dev/null ; echo $?) -eq 0 ] ; then
        unalias 'ag'
    fi
fi
# ugrep aliases    {{{1
if command -v ugrep >/dev/null ; then
    # - uq   = 'ug -Q'  = short & quick query UI
    #                     (interactive, uses .ugrep config)
    # - ux   = 'ug -UX' = short & quick binary pattern search
    #                     (uses .ugrep config)
    # - uz   = 'ug -z'  = short & quick compressed files and archives search
    #                     (uses .ugrep config)
    # - ugit = 'ug -R --ignore-files'
    #                   = works like git-grep and define your preferences
    #                     in .ugrep config
    typeset -A ug_aliases
    ug_aliases=(
        uq   'ug -Q'
        ux   'ug -UX'
        uz   'ug -z'
        ugit 'ug -R --ignore-files'
    )
    for cmd cmd_alias ("${(@kv)ug_aliases}") ; do
        [ $(alias "$cmd" >/dev/null ; echo $?) -eq 0 ] && unalias "$cmd"
        alias $cmd="$cmd_alias"
    done
    unset ug_aliases cmd cmd_alias
    # - grep   = 'ugrep -G'  = search with basic regular expressions (BRE)
    # - egrep  = 'ugrep -E'  = search with extended regular expressions (ERE)
    # - fgrep  = 'ugrep -F'  = find string(s)
    # - zgrep  = 'ugrep -zG' = search compressed files and archives with BRE
    # - zegrep = 'ugrep -zE' = search compressed files and archives with ERE
    # - zfgrep = 'ugrep -zF' = find string(s) in compressed files
    #                          and/or archives
    # - zpgrep = 'ugrep -zP' = search compressed files and archives
    #                          with Perl regular expressions
    # - zxgrep = 'ugrep -zW' = search (ERE) compressed files/archives
    #                          and output text or hex for binary
    typeset -A ugrep_aliases
    ugrep_aliases=(
        grep   'ugrep -G'
        egrep  'ugrep -E'
        fgrep  'ugrep -F'
        zgrep  'ugrep -zG'
        zegrep 'ugrep -zE'
        zfgrep 'ugrep -zF'
        zpgrep 'ugrep -zP'
        zxgrep 'ugrep -zW'
    )
    ugrep_hidden='--hidden --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}'
    typeset -a filters
    command -v pdftotext >/dev/null && filters+=('pdf:pdftotext % -')
    command -v soffice >/dev/null && \
        filters+=('odt,doc,docx,rtf,xls,xlsx,ppt,pptx:soffice --headless --cat %')
    ugrep_filter=''
    if [[ ${#filters[@]} -gt 0 ]] ; then
        ugrep_filter="$(printf -v var '%s,' "${filters[@]}" ; echo "${var%,}")"
        ugrep_filter="--filter='$ugrep_filter'"
    fi
    unset filters
    for cmd cmd_alias ("${(@kv)ugrep_aliases}") ; do
        [ $(alias "$cmd" >/dev/null ; echo $?) -eq 0 ] && unalias "$cmd"
        alias $cmd="$cmd_alias $ugrep_hidden $ugrep_filter"
    done
    unset ugrep_aliases ugrep_hidden ugrep_filter element cmd cmd_alias
fi
# qutebrowser to use webengine backend    {{{1
alias qutebrowser='qutebrowser --backend webengine'    # }}}1

# Initial apps

# Fortune    {{{1
if which fortune &>/dev/null ; then
    echo "${RED}Fortune for today:${RESET}"
    echo
    fortune
    echo
fi

# Chuck Norris cow    {{{1
if which chuck_cow &>/dev/null ; then
    echo "${RED}Cow has a Chuck Norris fact:${RESET}"
    chuck_cow
    echo
fi    # }}}1

# vim:fdm=marker:
